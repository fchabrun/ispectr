if (!exactly_1_ref_trace_is_present) {
elp_trace <- NULL
}
# spep (no spep here)
exactly_1_spe_trace_is_present <- F
spe_trace <- NULL
# spep fractions
spe_fraction_coords <- as.numeric(global_is_data[data_position, paste0(c("Ref_f"), 1:10)])
spe_fraction_coords <- spe_fraction_coords[!is.na(spe_fraction_coords)]
if (length(spe_fraction_coords) > 0) {
spe_fractions = list(coords=spe_fraction_coords, names=rep("?", length(spe_fraction_coords)-1))
} else {
spe_fractions <- NULL
}
# peaks
spe_peak_data = as.numeric(global_is_data[data_position, paste0(c("Ref_p"), 1:10)])
spe_peak_data <- spe_peak_data[!is.na(spe_peak_data)]
if (length(spe_peak_data) == 0) {
spe_peak_data <- NULL
}
sample_json_data <- list(paid = "",
aaid = aaid,
age = -1,
sex = "N/A",
total_protein = tp,
short_comments = short_comments,
long_comments = long_comments,
traces=list(ELP = list(exists=T, data=elp_trace),
IgG = list(exists=T, data=g_trace),
IgA = list(exists=T, data=a_trace),
IgM = list(exists=T, data=m_trace),
K = list(exists=T, data=k_trace),
L = list(exists=T, data=l_trace),
Ref = list(exists=exactly_1_ref_trace_is_present, data=ref_trace),
SPE = list(exists=exactly_1_spe_trace_is_present, data=spe_trace, fractions=spe_fractions, peaks=spe_peak_data)))
sample_json_data
ife_category
long_comments <- ""
if (nchar(ife_fabs) > 2) {
long_comments <- paste(long_comments, paste("Full antibodies:", post_process_ab_names(ife_fabs)), sep="\n")
}
if (nchar(ife_fhcs) > 2) {
long_comments <- paste(long_comments, paste("Free HCs:", post_process_ab_names(ife_fhcs)), sep="\n")
}
if (nchar(ife_flcs) > 2) {
long_comments <- paste(long_comments, paste("Free LCs:", post_process_ab_names(ife_flcs)), sep="\n")
}
long_comments <- paste(long_comments, ife_comment, sep="\n")
long_comments
substr(long_comments, 2, nchar(long_comments))
# create input json files
input_json_directory <- "C:/Users/flori/OneDrive - univ-angers.fr/Documents/Home/Research/SPECTR/ISPECTR/data/2025/capetown/preannotation/input_jsons"
for (data_position in 1:nrow(global_is_data)) {
aaid <- global_is_data$id_unique[data_position]
if (aaid %in% annots$episode) {
ife_comment <- annots[annots$episode == aaid, ]$ife_comment
ife_category <- annots[annots$episode == aaid, 4]
ife_fabs <- annots[annots$episode == aaid, ]$`Heavy-Light.Chain.Pairs`
ife_fhcs <- annots[annots$episode == aaid, ]$Unpaired.Heavy.Chains
ife_flcs <- annots[annots$episode == aaid, ]$Unpaired.Light.Chains
short_comments <- ife_category
long_comments <- ""
if (nchar(ife_fabs) > 2) {
long_comments <- paste(long_comments, paste("Full antibodies:", post_process_ab_names(ife_fabs)), sep="\n")
}
if (nchar(ife_fhcs) > 2) {
long_comments <- paste(long_comments, paste("Free HCs:", post_process_ab_names(ife_fhcs)), sep="\n")
}
if (nchar(ife_flcs) > 2) {
long_comments <- paste(long_comments, paste("Free LCs:", post_process_ab_names(ife_flcs)), sep="\n")
}
long_comments <- paste(long_comments, ife_comment, sep="\n")
long_comments <- substr(long_comments, 2, nchar(long_comments))
}
# metadata
tp <- global_is_data[data_position, "Ref_pt"]
# mandatory traces
elp_trace <- as.numeric(global_is_data[data_position, paste0(c("ELP_x"), 1:304)] )
g_trace <- as.numeric(global_is_data[data_position, paste0(c("IgG_x"), 1:304)] )
a_trace <- as.numeric(global_is_data[data_position, paste0(c("IgA_x"), 1:304)] )
m_trace <- as.numeric(global_is_data[data_position, paste0(c("IgM_x"), 1:304)] )
k_trace <- as.numeric(global_is_data[data_position, paste0(c("K_x"), 1:304)] )
l_trace <- as.numeric(global_is_data[data_position, paste0(c("L_x"), 1:304)] )
# ref traces
ref_trace <- global_is_data[data_position, paste0(c("Ref_x"), 1:304)]
exactly_1_ref_trace_is_present <- any(elp_trace > 0)
if (!exactly_1_ref_trace_is_present) {
elp_trace <- NULL
}
# spep (no spep here)
exactly_1_spe_trace_is_present <- F
spe_trace <- NULL
# spep fractions
spe_fraction_coords <- as.numeric(global_is_data[data_position, paste0(c("Ref_f"), 1:10)])
spe_fraction_coords <- spe_fraction_coords[!is.na(spe_fraction_coords)]
if (length(spe_fraction_coords) > 0) {
spe_fractions = list(coords=spe_fraction_coords, names=rep("?", length(spe_fraction_coords)-1))
} else {
spe_fractions <- NULL
}
# peaks
spe_peak_data = as.numeric(global_is_data[data_position, paste0(c("Ref_p"), 1:10)])
spe_peak_data <- spe_peak_data[!is.na(spe_peak_data)]
if (length(spe_peak_data) == 0) {
spe_peak_data <- NULL
}
sample_json_data <- list(paid = "",
aaid = aaid,
age = -1,
sex = "N/A",
total_protein = tp,
short_comments = short_comments,
long_comments = long_comments,
traces=list(ELP = list(exists=T, data=elp_trace),
IgG = list(exists=T, data=g_trace),
IgA = list(exists=T, data=a_trace),
IgM = list(exists=T, data=m_trace),
K = list(exists=T, data=k_trace),
L = list(exists=T, data=l_trace),
Ref = list(exists=exactly_1_ref_trace_is_present, data=ref_trace),
SPE = list(exists=exactly_1_spe_trace_is_present, data=spe_trace, fractions=spe_fractions, peaks=spe_peak_data)))
# save at desired location
write(rjson::toJSON(sample_json_data, indent=2), file.path(input_json_directory, paste0(aaid, ".json")))
}
for (data_position in 1:nrow(global_is_data)) {
aaid <- global_is_data$id_unique[data_position]
if (aaid %in% annots$episode) {
ife_comment <- annots[annots$episode == aaid, ]$ife_comment
ife_category <- annots[annots$episode == aaid, 4]
ife_fabs <- annots[annots$episode == aaid, ]$`Heavy-Light.Chain.Pairs`
ife_fhcs <- annots[annots$episode == aaid, ]$Unpaired.Heavy.Chains
ife_flcs <- annots[annots$episode == aaid, ]$Unpaired.Light.Chains
short_comments <- ife_category
long_comments <- ""
if (nchar(ife_fabs) > 2) {
long_comments <- paste(long_comments, paste("Full antibodies:", post_process_ab_names(ife_fabs)), sep="\n")
}
if (nchar(ife_fhcs) > 2) {
long_comments <- paste(long_comments, paste("Free HCs:", post_process_ab_names(ife_fhcs)), sep="\n")
}
if (nchar(ife_flcs) > 2) {
long_comments <- paste(long_comments, paste("Free LCs:", post_process_ab_names(ife_flcs)), sep="\n")
}
long_comments <- paste(long_comments, ife_comment, sep="\n")
long_comments <- substr(long_comments, 2, nchar(long_comments))
}
# metadata
tp <- global_is_data[data_position, "Ref_pt"]
# mandatory traces
elp_trace <- as.numeric(global_is_data[data_position, paste0(c("ELP_x"), 1:304)] )
g_trace <- as.numeric(global_is_data[data_position, paste0(c("IgG_x"), 1:304)] )
a_trace <- as.numeric(global_is_data[data_position, paste0(c("IgA_x"), 1:304)] )
m_trace <- as.numeric(global_is_data[data_position, paste0(c("IgM_x"), 1:304)] )
k_trace <- as.numeric(global_is_data[data_position, paste0(c("K_x"), 1:304)] )
l_trace <- as.numeric(global_is_data[data_position, paste0(c("L_x"), 1:304)] )
# ref traces
ref_trace <- global_is_data[data_position, paste0(c("Ref_x"), 1:304)]
exactly_1_ref_trace_is_present <- any(elp_trace > 0)
if (!exactly_1_ref_trace_is_present) {
elp_trace <- NULL
}
# spep (no spep here)
exactly_1_spe_trace_is_present <- F
spe_trace <- NULL
# spep fractions
spe_fraction_coords <- as.numeric(global_is_data[data_position, paste0(c("Ref_f"), 1:10)])
spe_fraction_coords <- spe_fraction_coords[!is.na(spe_fraction_coords)]
if (length(spe_fraction_coords) > 0) {
spe_fractions = list(coords=spe_fraction_coords, names=rep("?", length(spe_fraction_coords)-1))
} else {
spe_fractions <- NULL
}
# peaks
spe_peak_data = as.numeric(global_is_data[data_position, paste0(c("Ref_p"), 1:10)])
spe_peak_data <- spe_peak_data[!is.na(spe_peak_data)]
if (length(spe_peak_data) == 0) {
spe_peak_data <- NULL
}
sample_json_data <- list(paid = "",
aaid = aaid,
age = -1,
sex = "N/A",
total_protein = tp,
short_comments = short_comments,
long_comments = long_comments,
traces=list(ELP = list(exists=T, data=elp_trace),
IgG = list(exists=T, data=g_trace),
IgA = list(exists=T, data=a_trace),
IgM = list(exists=T, data=m_trace),
K = list(exists=T, data=k_trace),
L = list(exists=T, data=l_trace),
Ref = list(exists=exactly_1_ref_trace_is_present, data=ref_trace),
SPE = list(exists=exactly_1_spe_trace_is_present, data=spe_trace, fractions=spe_fractions, peaks=spe_peak_data)))
# save at desired location
write(rjson::toJSON(sample_json_data, indent=2), file.path(input_json_directory, paste0(aaid, ".json")))
}
for (data_position in 1:nrow(global_is_data)) {
aaid <- global_is_data$id_unique[data_position]
if (aaid %in% annots$episode) {
ife_comment <- annots[annots$episode == aaid, ]$ife_comment
ife_category <- annots[annots$episode == aaid, 4]
ife_fabs <- annots[annots$episode == aaid, ]$`Heavy-Light.Chain.Pairs`
ife_fhcs <- annots[annots$episode == aaid, ]$Unpaired.Heavy.Chains
ife_flcs <- annots[annots$episode == aaid, ]$Unpaired.Light.Chains
short_comments <- ife_category
long_comments <- ""
if (nchar(ife_fabs) > 2) {
long_comments <- paste(long_comments, paste("Full antibodies:", post_process_ab_names(ife_fabs)), sep="\n")
}
if (nchar(ife_fhcs) > 2) {
long_comments <- paste(long_comments, paste("Free HCs:", post_process_ab_names(ife_fhcs)), sep="\n")
}
if (nchar(ife_flcs) > 2) {
long_comments <- paste(long_comments, paste("Free LCs:", post_process_ab_names(ife_flcs)), sep="\n")
}
long_comments <- paste(long_comments, ife_comment, sep="\n")
long_comments <- substr(long_comments, 2, nchar(long_comments))
}
# metadata
tp <- global_is_data[data_position, "Ref_pt"]
# mandatory traces
elp_trace <- as.numeric(global_is_data[data_position, paste0(c("ELP_x"), 1:304)] )
g_trace <- as.numeric(global_is_data[data_position, paste0(c("IgG_x"), 1:304)] )
a_trace <- as.numeric(global_is_data[data_position, paste0(c("IgA_x"), 1:304)] )
m_trace <- as.numeric(global_is_data[data_position, paste0(c("IgM_x"), 1:304)] )
k_trace <- as.numeric(global_is_data[data_position, paste0(c("K_x"), 1:304)] )
l_trace <- as.numeric(global_is_data[data_position, paste0(c("L_x"), 1:304)] )
# ref traces
ref_trace <- global_is_data[data_position, paste0(c("Ref_x"), 1:304)]
exactly_1_ref_trace_is_present <- any(elp_trace > 0)
if (!exactly_1_ref_trace_is_present) {
elp_trace <- NULL
}
# spep (no spep here)
exactly_1_spe_trace_is_present <- F
spe_trace <- NULL
# spep fractions
spe_fraction_coords <- as.numeric(global_is_data[data_position, paste0(c("Ref_f"), 1:10)])
spe_fraction_coords <- spe_fraction_coords[!is.na(spe_fraction_coords)]
if (length(spe_fraction_coords) > 0) {
spe_fractions = list(coords=spe_fraction_coords, names=rep("?", length(spe_fraction_coords)-1))
} else {
spe_fractions <- NULL
}
# peaks
spe_peak_data = as.numeric(global_is_data[data_position, paste0(c("Ref_p"), 1:10)])
spe_peak_data <- spe_peak_data[!is.na(spe_peak_data)]
if (length(spe_peak_data) == 0) {
spe_peak_data <- NULL
}
sample_json_data <- list(paid = "",
aaid = aaid,
age = -1,
sex = "N/A",
total_protein = tp,
short_comments = short_comments,
long_comments = long_comments,
traces=list(ELP = list(exists=T, data=elp_trace),
IgG = list(exists=T, data=g_trace),
IgA = list(exists=T, data=a_trace),
IgM = list(exists=T, data=m_trace),
K = list(exists=T, data=k_trace),
L = list(exists=T, data=l_trace),
Ref = list(exists=exactly_1_ref_trace_is_present, data=ref_trace),
SPE = list(exists=exactly_1_spe_trace_is_present, data=spe_trace, fractions=spe_fractions, peaks=spe_peak_data)))
# save at desired location
write(rjson::toJSON(sample_json_data, indent=2), file.path(input_json_directory, paste0(aaid, ".json")))
}
ife_fabs
annots[annots$episode == aaid, ]
ife_fabs
# create input json files
input_json_directory <- "C:/Users/flori/OneDrive - univ-angers.fr/Documents/Home/Research/SPECTR/ISPECTR/data/2025/capetown/preannotation/input_jsons"
for (data_position in 1:nrow(global_is_data)) {
aaid <- global_is_data$id_unique[data_position]
if (aaid %in% annots$episode) {
ife_comment <- annots[annots$episode == aaid, ]$ife_comment
ife_category <- annots[annots$episode == aaid, 4]
ife_fabs <- annots[annots$episode == aaid, ]$`Heavy-Light.Chain.Pairs`
ife_fhcs <- annots[annots$episode == aaid, ]$Unpaired.Heavy.Chains
ife_flcs <- annots[annots$episode == aaid, ]$Unpaired.Light.Chains
ife_fabs <- ifelse(is.na(ife_fabs), "", ife_fabs)
ife_fhcs <- ifelse(is.na(ife_fhcs), "", ife_fhcs)
ife_flcs <- ifelse(is.na(ife_flcs), "", ife_flcs)
short_comments <- ife_category
long_comments <- ""
if (nchar(ife_fabs) > 2) {
long_comments <- paste(long_comments, paste("Full antibodies:", post_process_ab_names(ife_fabs)), sep="\n")
}
if (nchar(ife_fhcs) > 2) {
long_comments <- paste(long_comments, paste("Free HCs:", post_process_ab_names(ife_fhcs)), sep="\n")
}
if (nchar(ife_flcs) > 2) {
long_comments <- paste(long_comments, paste("Free LCs:", post_process_ab_names(ife_flcs)), sep="\n")
}
long_comments <- paste(long_comments, ife_comment, sep="\n")
long_comments <- substr(long_comments, 2, nchar(long_comments))
}
# metadata
tp <- global_is_data[data_position, "Ref_pt"]
# mandatory traces
elp_trace <- as.numeric(global_is_data[data_position, paste0(c("ELP_x"), 1:304)] )
g_trace <- as.numeric(global_is_data[data_position, paste0(c("IgG_x"), 1:304)] )
a_trace <- as.numeric(global_is_data[data_position, paste0(c("IgA_x"), 1:304)] )
m_trace <- as.numeric(global_is_data[data_position, paste0(c("IgM_x"), 1:304)] )
k_trace <- as.numeric(global_is_data[data_position, paste0(c("K_x"), 1:304)] )
l_trace <- as.numeric(global_is_data[data_position, paste0(c("L_x"), 1:304)] )
# ref traces
ref_trace <- global_is_data[data_position, paste0(c("Ref_x"), 1:304)]
exactly_1_ref_trace_is_present <- any(elp_trace > 0)
if (!exactly_1_ref_trace_is_present) {
elp_trace <- NULL
}
# spep (no spep here)
exactly_1_spe_trace_is_present <- F
spe_trace <- NULL
# spep fractions
spe_fraction_coords <- as.numeric(global_is_data[data_position, paste0(c("Ref_f"), 1:10)])
spe_fraction_coords <- spe_fraction_coords[!is.na(spe_fraction_coords)]
if (length(spe_fraction_coords) > 0) {
spe_fractions = list(coords=spe_fraction_coords, names=rep("?", length(spe_fraction_coords)-1))
} else {
spe_fractions <- NULL
}
# peaks
spe_peak_data = as.numeric(global_is_data[data_position, paste0(c("Ref_p"), 1:10)])
spe_peak_data <- spe_peak_data[!is.na(spe_peak_data)]
if (length(spe_peak_data) == 0) {
spe_peak_data <- NULL
}
sample_json_data <- list(paid = "",
aaid = aaid,
age = -1,
sex = "N/A",
total_protein = tp,
short_comments = short_comments,
long_comments = long_comments,
traces=list(ELP = list(exists=T, data=elp_trace),
IgG = list(exists=T, data=g_trace),
IgA = list(exists=T, data=a_trace),
IgM = list(exists=T, data=m_trace),
K = list(exists=T, data=k_trace),
L = list(exists=T, data=l_trace),
Ref = list(exists=exactly_1_ref_trace_is_present, data=ref_trace),
SPE = list(exists=exactly_1_spe_trace_is_present, data=spe_trace, fractions=spe_fractions, peaks=spe_peak_data)))
# save at desired location
write(rjson::toJSON(sample_json_data, indent=2), file.path(input_json_directory, paste0(aaid, ".json")))
}
# create input json files
input_json_directory <- "C:/Users/flori/OneDrive - univ-angers.fr/Documents/Home/Research/SPECTR/ISPECTR/data/2025/capetown/preannotation/input_jsons"
for (data_position in 1:nrow(global_is_data)) {
aaid <- global_is_data$id_unique[data_position]
if (aaid %in% annots$episode) {
ife_comment <- annots[annots$episode == aaid, ]$ife_comment
ife_category <- annots[annots$episode == aaid, 4]
ife_fabs <- annots[annots$episode == aaid, ]$`Heavy-Light.Chain.Pairs`
ife_fhcs <- annots[annots$episode == aaid, ]$Unpaired.Heavy.Chains
ife_flcs <- annots[annots$episode == aaid, ]$Unpaired.Light.Chains
ife_fabs <- ifelse(is.na(ife_fabs), "", ife_fabs)
ife_fhcs <- ifelse(is.na(ife_fhcs), "", ife_fhcs)
ife_flcs <- ifelse(is.na(ife_flcs), "", ife_flcs)
short_comments <- ife_category
long_comments <- ""
if (nchar(ife_fabs) > 2) {
long_comments <- paste(long_comments, paste("Full antibodies:", post_process_ab_names(ife_fabs)), sep="\n")
}
if (nchar(ife_fhcs) > 2) {
long_comments <- paste(long_comments, paste("Free HCs:", post_process_ab_names(ife_fhcs)), sep="\n")
}
if (nchar(ife_flcs) > 2) {
long_comments <- paste(long_comments, paste("Free LCs:", post_process_ab_names(ife_flcs)), sep="\n")
}
long_comments <- paste(long_comments, ife_comment, sep="\n")
long_comments <- substr(long_comments, 2, nchar(long_comments))
}
# metadata
tp <- global_is_data[data_position, "Ref_pt"]
# mandatory traces
elp_trace <- as.numeric(global_is_data[data_position, paste0(c("ELP_x"), 1:304)] )
g_trace <- as.numeric(global_is_data[data_position, paste0(c("IgG_x"), 1:304)] )
a_trace <- as.numeric(global_is_data[data_position, paste0(c("IgA_x"), 1:304)] )
m_trace <- as.numeric(global_is_data[data_position, paste0(c("IgM_x"), 1:304)] )
k_trace <- as.numeric(global_is_data[data_position, paste0(c("K_x"), 1:304)] )
l_trace <- as.numeric(global_is_data[data_position, paste0(c("L_x"), 1:304)] )
# ref traces
ref_trace <- global_is_data[data_position, paste0(c("Ref_x"), 1:304)]
exactly_1_ref_trace_is_present <- any(elp_trace > 0)
if (!exactly_1_ref_trace_is_present) {
elp_trace <- NULL
}
# spep (same as ref here (?))
exactly_1_spe_trace_is_present <- exactly_1_ref_trace_is_present
spe_trace <- elp_trace
# spep fractions
spe_fraction_coords <- as.numeric(global_is_data[data_position, paste0(c("Ref_f"), 1:10)])
spe_fraction_coords <- spe_fraction_coords[!is.na(spe_fraction_coords)]
if (length(spe_fraction_coords) > 0) {
spe_fractions = list(coords=spe_fraction_coords, names=rep("?", length(spe_fraction_coords)-1))
} else {
spe_fractions <- NULL
}
# peaks
spe_peak_data = as.numeric(global_is_data[data_position, paste0(c("Ref_p"), 1:10)])
spe_peak_data <- spe_peak_data[!is.na(spe_peak_data)]
if (length(spe_peak_data) == 0) {
spe_peak_data <- NULL
}
sample_json_data <- list(paid = "",
aaid = aaid,
age = -1,
sex = "N/A",
total_protein = tp,
short_comments = short_comments,
long_comments = long_comments,
traces=list(ELP = list(exists=T, data=elp_trace),
IgG = list(exists=T, data=g_trace),
IgA = list(exists=T, data=a_trace),
IgM = list(exists=T, data=m_trace),
K = list(exists=T, data=k_trace),
L = list(exists=T, data=l_trace),
Ref = list(exists=exactly_1_ref_trace_is_present, data=ref_trace),
SPE = list(exists=exactly_1_spe_trace_is_present, data=spe_trace, fractions=spe_fractions, peaks=spe_peak_data)))
# save at desired location
write(rjson::toJSON(sample_json_data, indent=2), file.path(input_json_directory, paste0(aaid, ".json")))
}
post_process_ab_names <- function(s) {
s <- gsub("[][']+", "", s)
s <- gsub("-+", " ", s)
s <- gsub("igg", "IgG", s)
s <- gsub("iga", "IgA", s)
s <- gsub("igm", "IgM", s)
s <- gsub("lambda", "Lambda", s)
s <- gsub("kappa", "Kappa", s)
s
}
# create input json files
input_json_directory <- "C:/Users/flori/OneDrive - univ-angers.fr/Documents/Home/Research/SPECTR/ISPECTR/data/2025/capetown/preannotation/input_jsons"
for (data_position in 1:nrow(global_is_data)) {
aaid <- global_is_data$id_unique[data_position]
if (aaid %in% annots$episode) {
ife_comment <- annots[annots$episode == aaid, ]$ife_comment
ife_category <- annots[annots$episode == aaid, 4]
ife_fabs <- annots[annots$episode == aaid, ]$`Heavy-Light.Chain.Pairs`
ife_fhcs <- annots[annots$episode == aaid, ]$Unpaired.Heavy.Chains
ife_flcs <- annots[annots$episode == aaid, ]$Unpaired.Light.Chains
ife_fabs <- ifelse(is.na(ife_fabs), "", ife_fabs)
ife_fhcs <- ifelse(is.na(ife_fhcs), "", ife_fhcs)
ife_flcs <- ifelse(is.na(ife_flcs), "", ife_flcs)
short_comments <- ife_category
long_comments <- ""
if (nchar(ife_fabs) > 2) {
long_comments <- paste(long_comments, paste("Full antibodies:", post_process_ab_names(ife_fabs)), sep="\n")
}
if (nchar(ife_fhcs) > 2) {
long_comments <- paste(long_comments, paste("Free HCs:", post_process_ab_names(ife_fhcs)), sep="\n")
}
if (nchar(ife_flcs) > 2) {
long_comments <- paste(long_comments, paste("Free LCs:", post_process_ab_names(ife_flcs)), sep="\n")
}
long_comments <- paste(long_comments, ife_comment, sep="\n")
long_comments <- substr(long_comments, 2, nchar(long_comments))
}
# metadata
tp <- global_is_data[data_position, "Ref_pt"]
# mandatory traces
elp_trace <- as.numeric(global_is_data[data_position, paste0(c("ELP_x"), 1:304)] )
g_trace <- as.numeric(global_is_data[data_position, paste0(c("IgG_x"), 1:304)] )
a_trace <- as.numeric(global_is_data[data_position, paste0(c("IgA_x"), 1:304)] )
m_trace <- as.numeric(global_is_data[data_position, paste0(c("IgM_x"), 1:304)] )
k_trace <- as.numeric(global_is_data[data_position, paste0(c("K_x"), 1:304)] )
l_trace <- as.numeric(global_is_data[data_position, paste0(c("L_x"), 1:304)] )
# ref traces
ref_trace <- global_is_data[data_position, paste0(c("Ref_x"), 1:304)]
exactly_1_ref_trace_is_present <- any(elp_trace > 0)
if (!exactly_1_ref_trace_is_present) {
elp_trace <- NULL
}
# spep (same as ref here (?))
exactly_1_spe_trace_is_present <- exactly_1_ref_trace_is_present
spe_trace <- elp_trace
# spep fractions
spe_fraction_coords <- as.numeric(global_is_data[data_position, paste0(c("Ref_f"), 1:10)])
spe_fraction_coords <- spe_fraction_coords[!is.na(spe_fraction_coords)]
if (length(spe_fraction_coords) > 0) {
spe_fractions = list(coords=spe_fraction_coords, names=rep("?", length(spe_fraction_coords)-1))
} else {
spe_fractions <- NULL
}
# peaks
spe_peak_data = as.numeric(global_is_data[data_position, paste0(c("Ref_p"), 1:10)])
spe_peak_data <- spe_peak_data[!is.na(spe_peak_data)]
if (length(spe_peak_data) == 0) {
spe_peak_data <- NULL
}
sample_json_data <- list(paid = "",
aaid = aaid,
age = -1,
sex = "N/A",
total_protein = tp,
short_comments = short_comments,
long_comments = long_comments,
traces=list(ELP = list(exists=T, data=elp_trace),
IgG = list(exists=T, data=g_trace),
IgA = list(exists=T, data=a_trace),
IgM = list(exists=T, data=m_trace),
K = list(exists=T, data=k_trace),
L = list(exists=T, data=l_trace),
Ref = list(exists=exactly_1_ref_trace_is_present, data=ref_trace),
SPE = list(exists=exactly_1_spe_trace_is_present, data=spe_trace, fractions=spe_fractions, peaks=spe_peak_data)))
# save at desired location
write(rjson::toJSON(sample_json_data, indent=2), file.path(input_json_directory, paste0(aaid, ".json")))
}
